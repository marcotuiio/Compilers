Start: AstParse MyEOF {} ;

AstParse: DeclaracoesGlobais Funcoes {} ;

DeclaracoesGlobais: CONSTANT ID VALUE COLON NUM_INT DeclaracoesGlobais {}
    | GLOBAL VARIABLE COLON ID TYPE COLON {} 
    | { } ;

ArrayCheck: L_SQUARE_BRACKET NUM_INT R_SQUARE_BRACKET ArrayCheck {}
    | { $$ = NULL; } ;

Expression: BinaryExpr { }
    | TernaryExpr { }
    | UnaryExpr { } ;

BinaryExpr: Bop L_PAREN Expression COMMA Expression R_PAREN SEMICOLON {} ;

TernaryExpr: TERNARY_CONDITIONAL L_PAREN Expression COMMA Expression COMMA Expression {} ;

UnaryExpr: Uop L_PAREN Expression R_PAREN SEMICOLON {} 
    | L_PAREN Expression R_PAREN SEMICOLON Uop {} ;

Bop: PLUS {}
    | MINUS {}
    | MULTIPLY {}
    | DIVIDE {}
    | REMAINDER {}
    | BITWISE_AND {}
    | BITWISE_OR {}
    | BITWISE_XOR {}
    | LOGICAL_AND {}
    | LOGICAL_OR {}
    | EQUAL {}
    | NOT_EQUAL {}
    | LESS_THAN {}
    | LESS_EQUAL {}
    | GREATER_THAN {}
    | GREATER_EQUAL {} 
    | R_SHIFT {}
    | L_SHIFT {}
    | ASSIGN {}
    | ADD_ASSIGN {}
    | MINUS_ASSIGN {} ;

Uop: INC {}
    | DEC {}
    | NOT {}
    | BITWISE_NOT {} ;

Primaria: NUM_INT {}
    | CHARACTER {}
    | ID {} ;

Funcoes: FUNCTION COLON ID { currentHash = createHash(); } 
        RETURN_TYPE COLON VarType { pointerCount = 0; } 
        Pointers { paramCount = 0; } 
        Parameters DeclaracoesLocais Comandos END_FUNCTION Funcoes {} ;

VarType: INT {}
    | CHAR {}
    | VOID {} ;

Parameters: PARAMETER COLON ID TYPE COLON 
        VarType { pointerCount = 0; } 
        Pointers ArrayCheck Parameters {}
    | { } ;

DeclaracoesLocais: VARIABLE COLON ID TYPE COLON 
        VarType { pointerCount = 0; } 
        Pointers ArrayCheck DeclaracoesLocais {}
    | { } ; 

Pointers: MULTIPLY Pointers { pointerCount++; }
    | { } ;

Comandos: IF L_PAREN Expression COMMA Comandos COMMA Comandos R_PAREN Comandos {}
    | DO_WHILE L_PAREN Comandos COMMA Expression R_PAREN Comandos {}
    | WHILE L_PAREN Expression COMMA Comandos R_PAREN Comandos {}
    | FOR L_PAREN Expression COMMA Expression COMMA Expression COMMA Comandos R_PAREN SEMICOLON Comandos {}
    | PRINTF L_PAREN STRING AuxPrint R_PAREN SEMICOLON Comandos {}
    | SCANF L_PAREN STRING COMMA BITWISE_AND L_PAREN ID R_PAREN R_PAREN SEMICOLON Comandos {}
    | RETURN L_PAREN Expression R_PAREN Comandos {}
    | EXIT L_PAREN Expression R_PAREN Comandos {} 
    | Expression SEMICOLON Comandos {}

AuxPrint: COMMA Expression AuxPrint {}
    | {} ;
