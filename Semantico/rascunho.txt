// void traverseASTExpression(Expression *expression) {
//     if (expression == NULL) return;

//     switch (expression->type) {
//         case ATRIBUICAO:
//             printf("Type ATRIBUICAO\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case LISTA_EXP:  // Expressao COMMA ExpressaoAtribuicao
//             printf("Type LISTA_EXP\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case TERNARY:
//             printf("Type TERNARY\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case OR_LOGICO:
//             printf("Type OR_LOGICO\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case AND_LOGICO:
//             printf("Type AND_LOGICO\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case OR_BIT:
//             printf("Type OR_BIT\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case XOR_BIT:
//             printf("Type XOR_BIT\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case AND_BIT:
//             printf("Type AND_BIT\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case IGUALDADE:
//             printf("Type IGUALDADE\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case RELACIONAL:
//             printf("Type RELACIONAL\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case SHIFT:
//             printf("Type SHIFT\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case ADITIVIVA:
//             printf("Type ADITIVIVA\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case MULTIPLICATIVA:
//             printf("Type MULTIPLICATIVA\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case CASTING:
//             printf("Type CASTING\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case UNARIA:
//             printf("Type UNARIA\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case POS_FIXA:
//             printf("Type POS_FIXA\n");
//             printf("Operator: %d\n", expression->operator);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);  // 1
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);  // 2
//             break;

//         case PRIMARIA:
//             printf("Type PRIMARIA\n");
//             printf("Operator: %d %s\n", expression->operator,(char *) expression->value);
//             printf("Left Operand:\n");
//             traverseASTExpression(expression->left);
//             printf("Right Operand:\n");
//             traverseASTExpression(expression->right);
//             break;

//         case NUMEROS:
//             printf("Type NUMEROS\n");
//             printf("Value: %s %d\n", (char *)expression->value, (int)expression->posIncrement);
//             break;

//         default:
//             printf("Unknown expression type: %p \n", expression);
//             break;
//     }
// }

/* ExpressaoPosFixa: ExpressaoPrimaria { $$ = $1; }
    | ExpressaoPosFixa AuxPosFixa {
        AuxToken *decoy = createAuxToken($2->value->valor, $2->value->line, $2->value->column, $2->value->type);
        printf("Criada pos fixa %d %p %p\n", $2->value->type, $1, $2);
        if ($2->value->type == DEC || $2->value->type == INC) {
            Expression *aux = createExpression(POS_FIXA, $2->value->type, decoy, $1, NULL);
            $$ = aux;
        }

        // $1->right = $2;
        // $$ = $1; 
    } ;

AuxPosFixa: L_SQUARE_BRACKET Expressao R_SQUARE_BRACKET {
        AuxToken *auxToken = createAuxToken($1.valor, $1.line, $1.column, L_SQUARE_BRACKET);
        $2->value = auxToken;
        $$ = $2; 
    }
    | L_PAREN PulaExpressaoAtribuicao R_PAREN { 
        AuxToken *auxToken = createAuxToken($1.valor, $1.line, $1.column, L_PAREN);
        $2->value = auxToken;
        $$ = $2; 
    }
    | INC {
        AuxToken *auxToken = createAuxToken($1.valor, $1.line, $1.column, INC);
        Expression *decoy = createExpression(POS_FIXA, INC, auxToken, NULL, NULL);
        $$ = decoy;
    }
    | DEC {
        AuxToken *auxToken = createAuxToken($1.valor, $1.line, $1.column, DEC);
        Expression *decoy = createExpression(POS_FIXA, DEC, auxToken, NULL, NULL);
        $$ = decoy;
    } ; */
